{"name": "test_Addhost", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\n  (Session info: MicrosoftEdge=139.0.3405.111)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff775ca81f5+23461]\n\t(No symbol) [0x0x7ff775bfc2e0]\n\t(No symbol) [0x0x7ff7759cce40]\n\t(No symbol) [0x0x7ff775a6a834]\n\t(No symbol) [0x0x7ff775a3a6ba]\n\t(No symbol) [0x0x7ff775a0f58d]\n\t(No symbol) [0x0x7ff775a5754f]\n\t(No symbol) [0x0x7ff775a3a423]\n\t(No symbol) [0x0x7ff775a0ea86]\n\t(No symbol) [0x0x7ff775a0dd11]\n\t(No symbol) [0x0x7ff775a0e8b3]\n\t(No symbol) [0x0x7ff775b0dd3d]\n\t(No symbol) [0x0x7ff775b1b0c8]\n\tGetHandleVerifier [0x0x7ff775d8803b+940523]\n\tGetHandleVerifier [0x0x7ff775d90d91+976705]\n\t(No symbol) [0x0x7ff775c09ed1]\n\t(No symbol) [0x0x7ff775c028b4]\n\t(No symbol) [0x0x7ff775c02a03]\n\t(No symbol) [0x0x7ff775bf44a6]\n\tBaseThreadInitThunk [0x0x7ffd039e7374+20]\n\tRtlUserThreadStart [0x0x7ffd057bcc91+33]", "trace": "@pytest.fixture(scope='function' )\n    def browser():\n      # 初始化浏览器\n>     driver = DriverManager.get_driver()#使用我们自定义的驱动管理\n\n..\\conftest.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\utils\\driver_manager.py:27: in get_driver\n    driver.add_cookie(cookie)\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:634: in add_cookie\n    self.execute(Command.ADD_COOKIE, {\"cookie\": cookie_dict})\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C647AD3DC8>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid cookie domain\",\"message\":\"invalid cookie domain\\\\n  (Session info...[0x0x7ff775bf44a6]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd039e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd057bcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidCookieDomainException: Message: invalid cookie domain\nE         (Session info: MicrosoftEdge=139.0.3405.111)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff775ca81f5+23461]\nE       \t(No symbol) [0x0x7ff775bfc2e0]\nE       \t(No symbol) [0x0x7ff7759cce40]\nE       \t(No symbol) [0x0x7ff775a6a834]\nE       \t(No symbol) [0x0x7ff775a3a6ba]\nE       \t(No symbol) [0x0x7ff775a0f58d]\nE       \t(No symbol) [0x0x7ff775a5754f]\nE       \t(No symbol) [0x0x7ff775a3a423]\nE       \t(No symbol) [0x0x7ff775a0ea86]\nE       \t(No symbol) [0x0x7ff775a0dd11]\nE       \t(No symbol) [0x0x7ff775a0e8b3]\nE       \t(No symbol) [0x0x7ff775b0dd3d]\nE       \t(No symbol) [0x0x7ff775b1b0c8]\nE       \tGetHandleVerifier [0x0x7ff775d8803b+940523]\nE       \tGetHandleVerifier [0x0x7ff775d90d91+976705]\nE       \t(No symbol) [0x0x7ff775c09ed1]\nE       \t(No symbol) [0x0x7ff775c028b4]\nE       \t(No symbol) [0x0x7ff775c02a03]\nE       \t(No symbol) [0x0x7ff775bf44a6]\nE       \tBaseThreadInitThunk [0x0x7ffd039e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffd057bcc91+33]\n\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidCookieDomainException"}, "start": 1756352491999, "stop": 1756352491999, "uuid": "2bf2e895-f3d5-486f-9049-9c0203623d00", "historyId": "6740cab1b9ab23ba3bd20d223b993a1b", "testCaseId": "6740cab1b9ab23ba3bd20d223b993a1b", "fullName": "tests.test_hostlist#test_Addhost", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_hostlist"}, {"name": "host", "value": "LAPTOP-JM9PJ4OM"}, {"name": "thread", "value": "22672-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_hostlist"}]}