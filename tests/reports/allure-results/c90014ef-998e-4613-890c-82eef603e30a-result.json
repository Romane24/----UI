{"name": "test_Addhost", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: MicrosoftEdge=139.0.3405.111)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff775ca81f5+23461]\n\t(No symbol) [0x0x7ff775bfc2e0]\n\tGetHandleVerifier [0x0x7ff775f20128+2611928]\n\t(No symbol) [0x0x7ff7759bce20]\n\t(No symbol) [0x0x7ff7759db61a]\n\t(No symbol) [0x0x7ff775a3fd1b]\n\t(No symbol) [0x0x7ff775a56e5a]\n\t(No symbol) [0x0x7ff775a3a423]\n\t(No symbol) [0x0x7ff775a0ea86]\n\t(No symbol) [0x0x7ff775a0dd11]\n\t(No symbol) [0x0x7ff775a0e8b3]\n\t(No symbol) [0x0x7ff775b0dd3d]\n\t(No symbol) [0x0x7ff775b1b0c8]\n\tGetHandleVerifier [0x0x7ff775d8803b+940523]\n\tGetHandleVerifier [0x0x7ff775d90d91+976705]\n\t(No symbol) [0x0x7ff775c09ed1]\n\t(No symbol) [0x0x7ff775c028b4]\n\t(No symbol) [0x0x7ff775c02a03]\n\t(No symbol) [0x0x7ff775bf44a6]\n\tBaseThreadInitThunk [0x0x7ffd039e7374+20]\n\tRtlUserThreadStart [0x0x7ffd057bcc91+33]", "trace": "hostList_page = <pages.hostList_page.HostlistPage object at 0x0000015DCAB49408>\n\n    def test_Addhost(hostList_page):\n>     hostList_page.AddHost()\n\ntest_hostlist.py:2: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\hostList_page.py:85: in AddHost\n    self.click(self.Addhost_BUTTON)\n..\\pages\\base_page.py:42: in click\n    element = self._get_clickable_element(locator, timeout)\n..\\pages\\base_page.py:33: in _get_clickable_element\n    return wait.until(EC.element_to_be_clickable(locator))\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:86: in until\n    value = method(self._driver)\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:355: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:739: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015DCB7E2EC8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...[0x0x7ff775bf44a6]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd039e7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd057bcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: MicrosoftEdge=139.0.3405.111)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff775ca81f5+23461]\nE       \t(No symbol) [0x0x7ff775bfc2e0]\nE       \tGetHandleVerifier [0x0x7ff775f20128+2611928]\nE       \t(No symbol) [0x0x7ff7759bce20]\nE       \t(No symbol) [0x0x7ff7759db61a]\nE       \t(No symbol) [0x0x7ff775a3fd1b]\nE       \t(No symbol) [0x0x7ff775a56e5a]\nE       \t(No symbol) [0x0x7ff775a3a423]\nE       \t(No symbol) [0x0x7ff775a0ea86]\nE       \t(No symbol) [0x0x7ff775a0dd11]\nE       \t(No symbol) [0x0x7ff775a0e8b3]\nE       \t(No symbol) [0x0x7ff775b0dd3d]\nE       \t(No symbol) [0x0x7ff775b1b0c8]\nE       \tGetHandleVerifier [0x0x7ff775d8803b+940523]\nE       \tGetHandleVerifier [0x0x7ff775d90d91+976705]\nE       \t(No symbol) [0x0x7ff775c09ed1]\nE       \t(No symbol) [0x0x7ff775c028b4]\nE       \t(No symbol) [0x0x7ff775c02a03]\nE       \t(No symbol) [0x0x7ff775bf44a6]\nE       \tBaseThreadInitThunk [0x0x7ffd039e7374+20]\nE       \tRtlUserThreadStart [0x0x7ffd057bcc91+33]\n\nd:\\tools\\python 37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException"}, "start": 1756357434419, "stop": 1756357450239, "uuid": "763f4990-b66b-4783-9faa-3574e5acc630", "testCaseId": "6740cab1b9ab23ba3bd20d223b993a1b", "fullName": "tests.test_hostlist#test_Addhost"}